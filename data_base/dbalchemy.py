from os import path
from datetime import datetime

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, joinedload
from data_base.dbcore import Base

from settings import config
from models.users import Users
from models.stats import Stats
from models.settings import Settings
from settings import utility


class Singleton(type):
    """
    –ü–∞—Ç–µ—Ä–Ω Singleton –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ
    –∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞,
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫ –Ω–µ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞.
    """

    def __init__(cls, name, bases, attrs, **kwargs):
        super().__init__(name, bases, attrs)
        cls.__instance = None

    def __call__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__call__(*args, **kwargs)
        return cls.__instance


class DBManager(metaclass=Singleton):
    """
    –ö–ª–∞—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        """
        self.engine = create_engine(config.DATABASE)
        session = sessionmaker(bind=self.engine)
        self._session = session()
        if not path.isfile(config.DATABASE):
            Base.metadata.create_all(self.engine)

    def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å–∏—é
        """
        self._session.close()

    def users_count(self):
        result = self._session.query(Users.id).count()
        self.close()
        return result

    def select_all_user_id(self):
        result = self._session.query(Users.id).all()
        self.close()
        return result

    def select_user_id(self, user):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ.
        """
        if self.find_user(user):
            result = self._session.query(
                Users.id).filter_by(teleid=user).one()
            self.close()
        else:
            self.add_user("Player" + str(user)[:4], user)
            result = self._session.query(
                Users.id).filter_by(teleid=user).one()
            self.close()
        return result.id

    def add_stats(self, score, games, trys, tips, teleid):
        '''
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ –ë–î –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
        '''
        userid = self.select_user_id(teleid)
        if bool(self.find_score(userid)):
            oldscore = self._session.query(Stats.score).filter_by(user_id=userid).one()
            oldgames = self._session.query(Stats.games).filter_by(user_id=userid).one()
            oldtrys = self._session.query(Stats.trys).filter_by(user_id=userid).one()
            oldtips = self._session.query(Stats.tips).filter_by(user_id=userid).one()
            print(oldscore, oldgames, oldtrys, oldtips)
            userstats = Stats(score=oldscore[0] + score, games=oldgames[0] + games, trys=oldtrys[0] + trys,
                              tips=oldtips[0] + tips,
                              user_id=userid)
            self._session.query(Stats).filter_by(user_id=userid).delete()
        else:
            userstats = Stats(score=score, games=1, trys=trys, tips=tips,
                              user_id=userid)
        self._session.add(userstats)
        self._session.commit()
        self.close()

    def add_user(self, name, teleid):
        '''
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –ë–î
        '''
        user = Users(name=name, teleid=teleid, is_activ=1)
        self._session.add(user)
        self._session.commit()
        self.close()

    def update_user_name(self, uname, teleid):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self._session.query(Users).filter_by(
            teleid=teleid).update({Users.name: uname})
        self._session.commit()
        self.close()

    def find_user(self, tid):
        '''
        –ò—â–µ—Ç –∏–≥—Ä–æ–∫–∞, –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        '''
        result = self._session.query(Users).filter_by(
            teleid=tid).all()
        self.close()
        return result

    def find_score(self, userid):
        '''
        –ò—â–µ—Ç –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞, –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        '''
        result = self._session.query(Stats).filter_by(
            user_id=userid).all()
        self.close()
        return result

    def find_settings(self, userid):
        '''
        –ò—â–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–∞, –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        '''
        result = self._session.query(Settings).filter_by(
            user_id=userid).all()
        self.close()
        return result

    def score_list(self):
        '''
        –í–æ–∑—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å—ã–≥—Ä–∞—à–∏—Ö –±–æ–ª–µ–µ 10 –∏–≥—Ä
        '''
        articles = self._session.query(Users.name, Stats.score).join(Stats).filter(Stats.games > 10).order_by(
            Stats.score.desc()).all()
        self.close()
        scorelist = []
        for article in articles:
            scorelist.append(article)
        return scorelist

    def games_list(self):
        '''
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å—ã–≥—Ä–∞–≤—à–∏—Ö –±–æ–ª–µ–µ 10 —Ä–∞–∑
        '''
        articles = self._session.query(Users.name, Stats.games).join(Stats).filter(Stats.games > 10).order_by(
            Stats.games.desc()).all()
        self.close()
        scorelist = []
        for article in articles:
            scorelist.append(article)
        return scorelist

    def find_user_name(self, teleid):
        '''
        –∏—â–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        '''
        result = self._session.query(Users.name).filter_by(teleid=teleid).one()
        self.close()
        return result

    def your_score(self, teleid):
        '''
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        '''
        userid = self.select_user_id(teleid)
        name = self._session.query(Users.name).filter_by(teleid=teleid).one()
        self.close()
        if bool(self.find_score(userid)):
            score = self._session.query(Stats.score).join(Users).filter_by(teleid=teleid).one()
            self.close()
            games = self._session.query(Stats.games).join(Users).filter_by(teleid=teleid).one()
            self.close()
            trys = self._session.query(Stats.trys).join(Users).filter_by(teleid=teleid).one()
            self.close()
            tips = self._session.query(Stats.tips).join(Users).filter_by(teleid=teleid).one()
            self.close()
            result = f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>: \n\n‚öúÔ∏è<b>{name[0]}</b>\n\nüèÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {score[0]}\nüïπ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games[0]}\nüé≤ –ü–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ: {trys[0]}\nüè≥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {tips[0]}"
        else:
            result = f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>: \n\n‚öúÔ∏è<b>{name[0]}</b>\n\nüèÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: 0\nüïπ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0\nüé≤ –ü–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ: 0\nüè≥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: 0"
        return result

    def show_count_games(self, teleid):
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–º –∏–≥—Ä
        '''
        userid = self.select_user_id(teleid)
        if bool(self.find_score(userid)):
            games = self._session.query(Stats.games).join(Users).filter_by(teleid=teleid).one()
            self.close()
        else:
            games = [0]
        return games[0]

    def make_settings(self, teleid):
        '''
        –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        '''
        userid = self.select_user_id(teleid)
        if not bool(self.find_settings(userid)):
            settings = Settings(hard=1, lang="EN", user_id=userid)
            self._session.add(settings)
            self._session.commit()
            self.close()


    def set_settings(self, name, value, teleid):
        userid = self.select_user_id(teleid)
        if name == "lang":
            self._session.query(Settings).filter_by(
                user_id=userid).update({Settings.lang: value})
            self._session.commit()
            self.close()
        elif name == "hard":
            if value in (1, 2, 3):
                self._session.query(Settings).filter_by(
                    user_id=userid).update({Settings.hard: value})
                self._session.commit()
                self.close()


    def show_settings(self, name, teleid):
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —è–∑—ã–∫ –∏–≥—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        '''
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º userid –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ id –∏ –ø–æ–ø—É—Ç–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤ –ë–î
        userid = self.select_user_id(teleid)
        self.make_settings(teleid)
        if name == "hard":
            result = self._session.query(Settings.hard).filter_by(user_id=userid).one()
            self.close()
        elif name == "lang":
            result = self._session.query(Settings.lang).filter_by(user_id=userid).one()
            self.close()
        return result[0]


    def user_init(self, teleid):
        '''
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        '''
        userid = self.select_user_id(teleid)
        self.make_settings(teleid)
        userstats = Stats(score=0, games=0, trys=0, tips=0,
                              user_id=userid)
        self._session.add(userstats)
        self._session.commit()
        self.close()

