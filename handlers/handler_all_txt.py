from settings.message import MESSAGES
from handlers.handler import Handler
from settings import config
from settings import utility
from emoji import emojize
from random import randint


class HendlerAllText(Handler):
    # –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

    def __int__(self, bot):
        super().__init__(bot)
        # —à–∞–≥ –≤ –∑–∞–∫–∞–∑–µ
        self.step = 0

    def new_word_gen(self, message):
        '''
        –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        '''
        #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–æ –≤
        self.BD.set_temp("neww", config.newword(self.BD.show_settings("lang", message.from_user.id), self.BD.show_settings("hard", message.from_user.id)), message.from_user.id)
        # config.neww = {message.from_user.id: config.newword(self.BD.show_lang(message.from_user.id)[0], self.BD.show_hard(message.from_user.id))}
        self.BD.set_temp("count", 1, message.from_user.id)
        self.BD.set_temp("tips_word", "", message.from_user.id)
        self.BD.set_temp("tips", 3, message.from_user.id)
        self.BD.set_temp("score", len(self.BD.show_temp("neww", message.from_user.id)) * 100, message.from_user.id)
        print("neww: ", self.BD.show_temp("neww", message.from_user.id), "count ", self.BD.show_temp("count", message.from_user.id), "score ", self.BD.show_temp("score", message.from_user.id))

    def pressed_btn_play(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–∞—Ç—å
        '''
        self.new_word_gen(message)
        self.BD.set_bool('play', True, message.from_user.id)
        print(self.BD.show_play_set(message.from_user.id))
        self.bot.send_message(message.chat.id,
                              emojize(f'üéÆ<b>–ù–∞—á–Ω–µ–º –∏–≥—Ä—É!</b>\n–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {len(self.BD.show_temp("neww", message.from_user.id))} –±—É–∫–≤'),
                              parse_mode="HTML",
                              reply_markup=self.keybords.game_menu())


    def successful(self, message):
        '''
        –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
        '''
        self.BD.set_bool('play', False, message.from_user.id)
        self.BD.add_stats(self.BD.show_temp("score", message.from_user.id), 1, self.BD.show_temp("count", message.from_user.id), (3 - self.BD.show_temp("tips", message.from_user.id)), message.from_user.id)
        if int(str(self.BD.show_temp('count', message.from_user.id))[:1]) == 1:
            tr = "–ø–æ–ø—ã—Ç–∫—É"
        elif int(str(self.BD.show_temp('count', message.from_user.id))[:1]) in [2,3,4]:
            tr = "–ø–æ–ø—ã—Ç–∫–∏"
        else:
            tr = "–ø–æ–ø—ã—Ç–æ–∫"
        self.bot.send_message(message.chat.id,
                                      emojize(f"üéÜ–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∑–∞ <b>{self.BD.show_temp('count', message.from_user.id)}</b> {tr}üé≤\n–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª <b>{self.BD.show_temp('score', message.from_user.id)}</b> –æ—á–∫–æ–≤üèÖ! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?"),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.start_menu())
        if self.BD.show_count_games(message.from_user.id) == 100:
            self.bot.send_message(message.chat.id,
                                      emojize(f'üèÜ–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: üïπ<b>"100 –∏–≥—Ä –≤–º–µ—Å—Ç–µ</b>"\nüèÖ–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ <b>1000</b> –æ—á–∫–æ–≤!)'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.start_menu())
            self.BD.add_stats(1000, 0, 0, 0, message.from_user.id)
        if self.BD.show_count_games(message.from_user.id) == 500:
            self.bot.send_message(message.chat.id,
                                      emojize(f'üèÜ–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>"500 –∏–≥—Ä –≤–º–µ—Å—Ç–µ"</b>üïπ\nüèÖ–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ <b>5000</b> –æ—á–∫–æ–≤!'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.start_menu())
            self.BD.add_stats(5000, 0, 0, 0, message.from_user.id)
        if self.BD.show_count_games(message.from_user.id) == 1000:
            self.bot.send_message(message.chat.id,
                                      emojize(f'üèÜ–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: üïπ<b>"1000 –∏–≥—Ä –≤–º–µ—Å—Ç–µ"</b>\nüèÖ–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ <b>10000</b> –æ—á–∫–æ–≤!'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.start_menu())
            self.BD.add_stats(10000, 0, 0, 0, message.from_user.id)
        self.BD.set_temp("score", 0, message.from_user.id)
        self.BD.set_temp("count", 1, message.from_user.id)
        self.BD.set_temp("tips", 3, message.from_user.id)

    def nice_try(self, message):
         #–¥–µ–π—Å—Ç–∞–∏—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ—Å–ª–∏ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ–≥–æ —á–∏—Å–ª–∞ –±—É–∫–≤
        for i in range(len(message.text)):
            if message.text[i].lower() == self.BD.show_temp("neww", message.from_user.id)[i]:
                        #—É—Å–ª–æ–≤–∏–µ - –µ—Å–ª–∏ –±—É–∫–≤–∞ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ i–π –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±—É–∫–æ–≤–æ–π –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ i–π –ø–æ–∑–∏—Ü–∏–∏, —Ç–æ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è 1 –∫ "–±—É–∫–≤–∞–º –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ"
                self.BD.set_temp("on_place", self.BD.show_temp("on_place", message.from_user.id)+1, message.from_user.id)
            if message.text[i].lower() in self.BD.show_temp("neww", message.from_user.id) and message.text[i].lower() not in self.BD.show_temp("try_word", message.from_user.id):
                        # –∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–∫–≤–∞ –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —Å–ª–æ–≤–µ –º–± –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, –º—ã –¥–æ–ª–∂–Ω—ã —É—á–µ—Å—Ç—å —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –≤ —É–≥–∞–¥—ã–≤–∞–µ–º–æ–º. –ü–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –≤ –º–∞—Å—Å–∏–≤ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å
                self.BD.set_temp("try_word", self.BD.show_temp("try_word", message.from_user.id)+message.text[i].lower(), message.from_user.id)
                for w in self.BD.show_temp("neww", message.from_user.id):
                            # –∞ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: –º–± –≤ —É–≥–∞–¥—ã–≤–∞–µ–º–æ–º —Å–ª–æ–≤–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤, –Ω—É–∂–Ω–æ —ç—Ç–æ —É—á–µ—Å—Ç—å
                    if w == message.text[i].lower():
                        self.BD.set_temp("on_word", self.BD.show_temp("on_word", message.from_user.id)+1, message.from_user.id)
        self.bot.send_message(message.chat.id,
                                      emojize(f'üî°–ë—É–∫–≤ –≤ —Å–ª–æ–≤–µ: {self.BD.show_temp("on_word", message.from_user.id)}, –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ: {self.BD.show_temp("on_place", message.from_user.id)}'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.game_menu())
        self.BD.set_temp("count", self.BD.show_temp("count", message.from_user.id)+1, message.from_user.id)
        if self.BD.show_temp("score", message.from_user.id) > (self.BD.show_settings("hard", message.from_user.id) * 10):
            self.BD.set_temp("score", self.BD.show_temp("score", message.from_user.id) - self.BD.show_settings("hard", message.from_user.id) * 10, message.from_user.id)
        self.BD.set_temp("on_place", 0, message.from_user.id)
        self.BD.set_temp("on_word", 0, message.from_user.id)
        self.BD.set_temp("try_word", "", message.from_user.id)
        print(self.BD.show_temp("neww", message.from_user.id))

    def bed_try(self, message):
        '''
        –ü—Ä–∏ –≤–≤–æ–¥–µ —Å–ª–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º –∫–æ–ª-–≤–æ–º –±—É–∫–≤
        '''
        if self.BD.show_temp("score", message.from_user.id) > (self.BD.show_settings("hard", message.from_user.id) * 10):
            self.BD.set_temp("score", self.BD.show_temp("score", message.from_user.id) - self.BD.show_settings("hard", message.from_user.id) * 10, message.from_user.id)
        self.BD.set_temp("count", self.BD.show_temp("count", message.from_user.id)+1, message.from_user.id)
        self.bot.send_message(message.chat.id, emojize(f'üõë–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ {len(self.BD.show_temp("neww", message.from_user.id))} –±—É–∫–≤'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.game_menu())

    def tips_enter(self, message):
        if self.BD.show_temp("tips", message.from_user.id) > 0:
            if self.BD.show_temp("score", message.from_user.id) > 100:
                self.BD.set_temp("score", self.BD.show_temp("score", message.from_user.id) - 100, message.from_user.id)
            else:
                self.BD.set_temp("score", 0, message.from_user.id)
            long = len(self.BD.show_temp("neww", message.from_user.id))
            if self.BD.show_temp("tips_word", message.from_user.id) == "":
                word = ""
                for i in range(1, len(self.BD.show_temp("neww", message.from_user.id))+1):
                    word += "*"
                self.BD.set_temp("tips_word", word, message.from_user.id)
            while True:
                num_word = randint(0, long-1)
                print(num_word, self.BD.show_temp("neww", message.from_user.id)[num_word])
                if self.BD.show_temp("neww", message.from_user.id)[num_word] not in self.BD.show_temp("tips_word", message.from_user.id):
                    self.BD.set_temp("tips", self.BD.show_temp("tips", message.from_user.id) -1, message.from_user.id)
                    for i in range(0, len(self.BD.show_temp("neww", message.from_user.id))):
                        if i == num_word:
                            word = self.BD.show_temp("tips_word", message.from_user.id)
                            result = word[:i] + self.BD.show_temp("neww", message.from_user.id)[num_word] + word[i+1:]
                            self.BD.set_temp("tips_word", result, message.from_user.id)
                    break
            self.bot.send_message(message.chat.id, emojize(f':white_flag:–í–∞—à–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: {self.BD.show_temp("tips_word", message.from_user.id)}'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.game_menu())
        else:
            self.bot.send_message(message.chat.id, emojize(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫'),
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.game_menu())










    def pressed_btn_reload(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
        '''
        self.new_word_gen(message)
        self.BD.set_bool('play', False, message.from_user.id)
        self.bot.send_message(message.chat.id,
                              f'–Ø –∑–∞–≥–∞–¥–∞–ª –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ! –í –Ω–µ–º {len(self.BD.show_temp("neww", message.from_user.id))} –±—É–∫–≤',
                              parse_mode="HTML",
                              reply_markup=self.keybords.game_menu())
        self.BD.set_bool('play', True, message.from_user.id)

    def pressed_btn_info(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ info
        '''
        self.bot.send_message(message.chat.id, MESSAGES['onboard'],
                              parse_mode="HTML",
                              reply_markup=self.keybords.info_menu())

    def pressed_btn_settings(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ settings
        '''
        self.BD.show_settings("hard", message.from_user.id)
        self.BD.make_settings(message.from_user.id)
        self.bot.send_message(message.chat.id, MESSAGES['settings'],
                              parse_mode="HTML",
                              reply_markup=self.keybords.settings_menu(message.from_user.id))

    def pressed_btn_rank(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ª —Å–ª–∞–≤—ã
        '''
        self.bot.send_message(message.chat.id, emojize(
            'üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–∞–ª —Å–ª–∞–≤—ã! \n–°—é–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç –∏–≥—Ä–æ–∫–∏ —Å—ã–≥—Ä–∞–≤—à–∏–µ –Ω–µ –º–µ–Ω–µ–µ 10 –∏–≥—Ä!'),
                              parse_mode="HTML",
                              reply_markup=self.keybords.rank_menu())

    def pressed_btn_langen(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        '''
        self.BD.set_settings("lang", "EN", message.from_user.id)
        self.bot.send_message(message.chat.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
                              parse_mode="HTML",
                              reply_markup=self.keybords.settings_menu(message.from_user.id))

    def pressed_btn_langru(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        '''
        self.BD.set_settings("lang", "RU", message.from_user.id)
        self.bot.send_message(message.chat.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
                              parse_mode="HTML",
                              reply_markup=self.keybords.settings_menu(message.from_user.id))

    def pressed_btn_back(self, message):
        '''
        –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ back
        '''
        self.bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
                              parse_mode="HTML",
                              reply_markup=self.keybords.start_menu())

    def pressed_btn_end(self, message):
        '''
        –∫–Ω–æ–ø–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É
        '''
        self.BD.set_bool('play', False, message.from_user.id)
        self.BD.set_temp("score", 0, message.from_user.id)
        self.BD.set_temp("count", 1, message.from_user.id)
        self.BD.set_temp("tips", 3, message.from_user.id)
        self.bot.send_message(message.chat.id, '–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É',
                              parse_mode="HTML",
                              reply_markup=self.keybords.start_menu())

    def pressed_btn_diff(self, message, diff):
        print('message', message)
        self.bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:',
                              reply_markup=self.keybords.set_select_diff(diff))
        # self.bot.send_message(message.chat.id,"",
        #                       reply_markup=self.keybords.settings_menu())
        print('message', message)

    def pressed_btn_login(self, message):
        self.BD.set_bool("name", True, message.from_user.id)
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è',
                              parse_mode="HTML",
                              reply_markup=self.keybords.settings_menu(message.from_user.id))

    def win_stats(self, message, score, trys, tips):
        pass

    def pressed_btn_score(self, message):
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–∫–∞–º
        '''
        scorelist = self.BD.score_list()
        print(scorelist)
        scorestats = "<b>üèÖ –û–±—â–∏–π –∑–∞—á–µ—Ç (–ø–æ –æ—á–∫–∞–º): \n\n</b>"
        i = 1
        userid = self.BD.select_user_id(message.from_user.id)
        for el in scorelist:
            if bool(self.BD.find_score(userid)) and el[0] == self.BD.find_user_name(message.from_user.id)[0]:
                if i > 10:
                    scorestats += '      ...\n'
                scorestats += f'‚öúÔ∏è<b>{i}. {el[0]}:    {el[1]}\n</b>'
            elif i < 11:
                scorestats += f'      {i}. {el[0]}:    {el[1]}\n'
            i += 1
        self.bot.send_message(message.chat.id, emojize(scorestats),
                              parse_mode="HTML",
                              reply_markup=self.keybords.rank_menu())

    def pressed_btn_games(self, message):
        gameslist = self.BD.games_list()
        print(gameslist)
        gamesstats = "<b>üïπ –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä: \n\n</b>"
        i = 1
        userid = self.BD.select_user_id(message.from_user.id)
        for el in gameslist:
            if bool(self.BD.find_score(userid)) and el[0] == self.BD.find_user_name(message.from_user.id)[0]:
                if i > 10:
                    gamesstats += '      ...\n'
                gamesstats += f'‚öúÔ∏è<b>{i}. {el[0]}:    {el[1]}\n</b>'
            elif i < 11:
                gamesstats += f'      {i}. {el[0]}:    {el[1]}\n'
            i += 1
        self.bot.send_message(message.chat.id, emojize(gamesstats),
                              parse_mode="HTML",
                              reply_markup=self.keybords.rank_menu())

    def pressed_btn_abs(self, message):
        gameslist = self.BD.games_list()
        scorelist = self.BD.score_list()
        score_game = []
        for game in gameslist:
            for score in scorelist:
                if game[0] == score[0]:
                    score_game.append((game[0], score[1] / game[1]))
        score_game.sort(reverse=True, key=lambda val: val[1])
        scoregamesstats = "<b>üëë –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∑–∞—á–µ—Ç (–æ—á–∫–∏/–∏–≥—Ä—ã): \n\n</b>"
        i = 1
        userid = self.BD.select_user_id(message.from_user.id)
        for el in score_game:
            if bool(self.BD.find_score(userid)) and el[0] == self.BD.find_user_name(message.from_user.id)[0]:
                if i > 10:
                    scoregamesstats += '      ...\n'
                scoregamesstats += f'‚öúÔ∏è<b>{i}. {el[0]}:    {round(el[1], 2)}\n</b>'
            elif i < 11:
                scoregamesstats += f'      {i}. {el[0]}:    {round(el[1], 2)}\n'
            i += 1
        self.bot.send_message(message.chat.id, emojize(scoregamesstats),
                              parse_mode="HTML",
                              reply_markup=self.keybords.rank_menu())

    def pressed_btn_uscore(self, message):
        mess = self.BD.your_score(message.from_user.id)
        self.bot.send_message(message.chat.id, emojize(mess),
                              parse_mode="HTML",
                              reply_markup=self.keybords.rank_menu())


    def handle(self):
        '''
        –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä) —Å–æ–æ–±—â–µ–Ω–∏–π
        –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
        '''

        @self.bot.message_handler(func=lambda message: True)
        def handle(message):
            # –ú–µ–Ω—é

            if message.text == config.KEYBOARD['PLAY_NOW']:
                self.pressed_btn_play(message)

            if message.text == config.KEYBOARD['INFO']:
                self.pressed_btn_info(message)

            if message.text == config.KEYBOARD['SETTINGS']:
                self.pressed_btn_settings(message)

            if message.text == config.KEYBOARD['RANK']:
                self.pressed_btn_rank(message)

            if message.text == config.KEYBOARD['<<']:
                self.pressed_btn_back(message)

            if message.text == config.KEYBOARD['END_GAME']:
                self.pressed_btn_end(message)

            if message.text == config.KEYBOARD['RELOAD']:
                self.pressed_btn_reload(message)

            # –ú–µ–Ω—é settings

            if message.text == config.KEYBOARD['LANGRU']:
                self.pressed_btn_langen(message)

            if message.text == config.KEYBOARD['LANGEN']:
                self.pressed_btn_langru(message)

            if config.KEYBOARD['HARD'] and message.text == config.KEYBOARD['HARD']:
                self.pressed_btn_diff(message, self.BD.show_settings("hard", message.from_user.id))

            if message.text == config.KEYBOARD['CHANGE_NAME']:
                self.pressed_btn_login(message)

            # –ú–µ–Ω—é Rank

            if message.text == config.KEYBOARD['SCORE']:
                self.pressed_btn_score(message)

            if message.text == config.KEYBOARD['GAMES']:
                self.pressed_btn_games(message)

            if message.text == config.KEYBOARD['ABSSCRE']:
                self.pressed_btn_abs(message)

            if message.text == config.KEYBOARD['YOURSTATS']:
                self.pressed_btn_uscore(message)


            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if bool(self.BD.show_name_set(message.from_user.id)) and message.text != config.KEYBOARD['CHANGE_NAME'] and message.text != "":
                self.BD.set_bool("name", False, message.from_user.id)
                print(self.BD.find_user(message.from_user.id))
                if bool(self.BD.find_user(message.from_user.id)):
                    self.BD.update_user_name(message.text, message.from_user.id)
                else:
                    username = message.text
                    teleid = message.from_user.id
                    self.BD.add_user(username, teleid)
                self.bot.send_message(message.chat.id, f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –Ω–∞ {message.text}',
                                      parse_mode="HTML",
                                      reply_markup=self.keybords.settings_menu(message.from_user.id))

            # –ò–≥—Ä–∞

            if self.BD.show_play_set(message.from_user.id) and message.text.lower() == self.BD.show_temp("neww", message.from_user.id) and message.text != config.KEYBOARD['TIPS']:
                self.successful(message)



            if self.BD.show_play_set(message.from_user.id) and len(message.text) == len(self.BD.show_temp("neww", message.from_user.id)) and message.text.lower() != self.BD.show_temp("neww", message.from_user.id) and message.text != config.KEYBOARD[
                'PLAY_NOW'] and message.text != config.KEYBOARD['RELOAD'] and message.text != config.KEYBOARD['TIPS']:
                self.nice_try(message)


            if self.BD.show_play_set(message.from_user.id) and len(message.text) != len(self.BD.show_temp("neww", message.from_user.id)) and message.text != config.KEYBOARD[
                'PLAY_NOW'] and message.text != config.KEYBOARD['RELOAD'] and message.text != config.KEYBOARD['TIPS']:
                self.bed_try(message)

            if self.BD.show_play_set(message.from_user.id) and message.text == config.KEYBOARD['TIPS']:
                self.tips_enter(message)

